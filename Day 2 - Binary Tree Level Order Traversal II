/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void bfs(TreeNode root, List<List<Integer>> ans)
    {
        LinkedList<TreeNode> queue = new LinkedList<>();
        List<Integer> list = new ArrayList<>();
        int count=1;
        queue.add(root);
        while(!queue.isEmpty()){
            TreeNode tmp = queue.poll();
            list.add(tmp.val);
            count--;
            if(tmp.left != null)  queue.add(tmp.left);
            if(tmp.right != null)  queue.add(tmp.right);
            if(count == 0){
                ans.add(0, list);
                //System.out.println(list);
                //System.out.println(ans);
                list = new ArrayList<>();
                count = queue.size();
            }
        }
    }
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if(root == null) return ans;
        bfs(root, ans);
        
        return ans;
    }
}














