class Solution {
    public void dfs(List<List<Integer>> ans, List<Integer> list, int start, int target, int[][]graph)
    {
        if(target == start){
            List<Integer> tmp = new ArrayList<>();
            for(int val:list)  tmp.add(val);
            tmp.add(target);
            ans.add(tmp);
            return;
        }
        list.add(start);
        int len = graph[start].length, i=0;
        while(i < len)
        {
            dfs(ans, list, graph[start][i], target, graph);
            i++;
        }
        list.remove(list.size()-1);
    }
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        
        dfs(ans, list, 0, graph.length-1, graph);
        return ans;
    }
}
